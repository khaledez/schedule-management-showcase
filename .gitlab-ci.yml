stages:
  - build
  - DEV
  - dprime
  - QA
  - demo
  - staging
  - production
#=========
# Build
#=========

build:
  stage: build
  image: docker:18-git
  only:
    - 'master'
    - 'development'
    - 'prod'
    - 'qa'
    - 'dprime'
    - 'gitlab'
    - 'devops'
  services:
    - docker:18-dind
  before_script:
    - 'apk add --no-cache curl'
    - 'apk add py-pip'
    - 'pip install awscli --upgrade --user'
    - 'export PATH=~/.local/bin:$PATH'
  script:
    - pip install ecs-deploy
    - echo "Login to  ECR Repository"
    - eval $(aws ecr get-login --no-include-email --region ca-central-1)
    - echo "Preparation task"
    - echo "Build Docker Image"
    - docker build -t master .
    - echo "Push to ECR Repository"
    - service_lower_name=$(echo "$service_name" | tr '[:upper:]' '[:lower:]')
    - export AWS_ECR_REPOSITORY="${accountID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${service_lower_name}"
    - echo $AWS_ECR_REPOSITORY
    - docker tag master:latest "${AWS_ECR_REPOSITORY}:${CI_COMMIT_SHA}"
    - docker push "${AWS_ECR_REPOSITORY}:${CI_COMMIT_SHA}"
#=========
# Deploy
#=========
deploy:
  stage: DEV
  image: python:3.7.3
  environment:
    name: development
    url: http://api.dev.monmedx.com
  except:
    - 'qa'
  only:
    - 'master'
    - 'development'
    - 'gitlab'
    - 'devops'
  before_script:
    - 'pip install awscli --upgrade --user'
    - 'export PATH=~/.local/bin:$PATH'
  script:
    - export clusterName=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DEV --output text --query "Stacks[0].Outputs[?OutputKey=='clusterName'].OutputValue" )
    - export DB_HOST=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DEV --output text --query "Stacks[0].Outputs[?OutputKey=='dbClusterEndpoint'].OutputValue" )
    - export MYSQL_PASSWORD_PARAMETER=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DEV --output text --query "Stacks[0].Outputs[?OutputKey=='MYSQLPASSWORDPARAMETER'].OutputValue" )
    - export restApiId=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DEV --output text --query "Stacks[0].Outputs[?OutputKey=='restApiId${service_name}'].OutputValue" )
    - sed -e "s;%BUILD_VERSION%;${CI_COMMIT_SHA};g" task-definition-base/task-definition-base-dev.json > task-definition.json
    - export S3_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DEV --output text --query "Stacks[0].Outputs[?OutputKey=='S3BUCKETNAME'].OutputValue" )
    - sed -i "s/%S3_BUCKET_NAME%/${S3_BUCKET_NAME}/g" task-definition.json
    - sed -i "s/%accountID%/${accountID}/g" task-definition.json
    - sed -i "s/%DB_HOST%/${DB_HOST}/g" task-definition.json
    - echo $MYSQL_PASSWORD_PARAMETER
    - sed -i "s;%MYSQL_PASSWORD_PARAMETER%;${MYSQL_PASSWORD_PARAMETER};g" task-definition.json
    - export DB_PASSWORD=$(aws ssm get-parameters --with-decryption --names MyStringParameter "${MYSQL_PASSWORD_PARAMETER}" --output text --query "Parameters[0].Value")
    - sed -i "s;%DB_PASSWORD%;${DB_PASSWORD};g" task-definition.json
    - sed -i "s/%AWS_DEFAULT_REGION%/${AWS_DEFAULT_REGION}/g" task-definition.json
    - sed -i "s/%service_name%/${service_name}/g" task-definition.json
    - service_lower_name=$(echo "$service_name" | tr '[:upper:]' '[:lower:]')
    - sed -i "s;%service_lower_name%;${service_lower_name};g" task-definition.json
    - aws ecs register-task-definition --family "DEV${service_name}" --cli-input-json "file://task-definition.json"
    - aws ecs update-service --cluster $clusterName --service "${service_name}" --desired-count 1 --task-definition "DEV${service_name}"  --force-new-deployment
# DPRIME
#=========
dprime:
  stage: dprime
  when: manual
  image: python:3.7.3
  environment:
    name: DPRIME
    url: http://api.DPRIME.monmedx.com
  only:
    - 'dprime'
  before_script:
    - 'pip install awscli --upgrade --user'
    - 'export PATH=~/.local/bin:$PATH'
    - 'aws --version'
  script:
    - export clusterName=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DPRIME --output text --query "Stacks[0].Outputs[?OutputKey=='clusterName'].OutputValue" )
    - export DB_HOST=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DPRIME --output text --query "Stacks[0].Outputs[?OutputKey=='dbClusterEndpoint'].OutputValue" )
    - export MYSQL_PASSWORD_PARAMETER=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DPRIME --output text --query "Stacks[0].Outputs[?OutputKey=='MYSQLPASSWORDPARAMETER'].OutputValue" )
    - export restApiId=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DPRIME --output text --query "Stacks[0].Outputs[?OutputKey=='restApiId${service_name}'].OutputValue" )
    - sed -e "s;%BUILD_VERSION%;${CI_COMMIT_SHA};g" task-definition-base/task-definition-base-dprime.json > task-definition.json
    - export S3_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_DPRIME --output text --query "Stacks[0].Outputs[?OutputKey=='S3BUCKETNAME'].OutputValue" )
    - sed -i "s/%S3_BUCKET_NAME%/${S3_BUCKET_NAME}/g" task-definition.json
    - sed -i "s/%accountID%/${accountID}/g" task-definition.json
    - sed -i "s/%DB_HOST%/${DB_HOST}/g" task-definition.json
    - echo $MYSQL_PASSWORD_PARAMETER
    - sed -i "s;%MYSQL_PASSWORD_PARAMETER%;${MYSQL_PASSWORD_PARAMETER};g" task-definition.json
    - export DB_PASSWORD=$(aws ssm get-parameters --with-decryption --names MyStringParameter "${MYSQL_PASSWORD_PARAMETER}" --output text --query "Parameters[0].Value")
    - sed -i "s;%DB_PASSWORD%;${DB_PASSWORD};g" task-definition.json
    - sed -i "s/%AWS_DEFAULT_REGION%/${AWS_DEFAULT_REGION}/g" task-definition.json
    - sed -i "s/%service_name%/${service_name}/g" task-definition.json
    - service_lower_name=$(echo "$service_name" | tr '[:upper:]' '[:lower:]')
    - sed -i "s;%service_lower_name%;${service_lower_name};g" task-definition.json
    - aws ecs register-task-definition --family "DPRIME${service_name}" --cli-input-json "file://task-definition.json"
    - aws ecs update-service --cluster $clusterName --service "${service_name}" --desired-count 1 --task-definition "DPRIME${service_name}"  --force-new-deployment

# QA
#=========
QA:
  stage: QA
  when: manual
  image: python:3.7.3
  environment:
    name: qa
    url: http://api.qa.monmedx.com
  only:
    - 'qa'
    - 'development'

  before_script:
    - 'pip install awscli --upgrade --user'
    - 'export PATH=~/.local/bin:$PATH'
    - 'aws --version'
  script:
    - export clusterName=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_QA --output text --query "Stacks[0].Outputs[?OutputKey=='clusterName'].OutputValue" )
    - export DB_HOST=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_QA --output text --query "Stacks[0].Outputs[?OutputKey=='dbClusterEndpoint'].OutputValue" )
    - export MYSQL_PASSWORD_PARAMETER=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_QA --output text --query "Stacks[0].Outputs[?OutputKey=='MYSQLPASSWORDPARAMETER'].OutputValue" )
    - export restApiId=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_QA --output text --query "Stacks[0].Outputs[?OutputKey=='restApiId${service_name}'].OutputValue" )
    - sed -e "s;%BUILD_VERSION%;${CI_COMMIT_SHA};g" task-definition-base/task-definition-base-qa.json > task-definition.json
    - sed -i "s/%accountID%/${accountID}/g" task-definition.json
    - export S3_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $CLOUDFORMATION_STACK_NAME_QA --output text --query "Stacks[0].Outputs[?OutputKey=='S3BUCKETNAME'].OutputValue" )
    - sed -i "s/%S3_BUCKET_NAME%/${S3_BUCKET_NAME}/g" task-definition.json
    - sed -i "s/%DB_HOST%/${DB_HOST}/g" task-definition.json
    - echo $MYSQL_PASSWORD_PARAMETER
    - sed -i "s;%MYSQL_PASSWORD_PARAMETER%;${MYSQL_PASSWORD_PARAMETER};g" task-definition.json
    - export DB_PASSWORD=$(aws ssm get-parameters --with-decryption --names MyStringParameter "${MYSQL_PASSWORD_PARAMETER}" --output text --query "Parameters[0].Value")
    - sed -i "s;%DB_PASSWORD%;${DB_PASSWORD};g" task-definition.json
    - sed -i "s/%AWS_DEFAULT_REGION%/${AWS_DEFAULT_REGION}/g" task-definition.json
    - sed -i "s/%service_name%/${service_name}/g" task-definition.json
    - service_lower_name=$(echo "$service_name" | tr '[:upper:]' '[:lower:]')
    - sed -i "s;%service_lower_name%;${service_lower_name};g" task-definition.json
    - aws ecs register-task-definition --family "QA${service_name}" --cli-input-json "file://task-definition.json"
    - aws ecs update-service --cluster $clusterName --service "${service_name}" --desired-count 1 --task-definition "QA${service_name}"  --force-new-deployment
