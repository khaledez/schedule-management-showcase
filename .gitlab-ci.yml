stages:
 - build
 - DEV
 - QA
 - staging
 - PROD
#=========
# Build
#=========

build:
  stage: build
  image: docker:18-git
  only:
    - "master"
    - "development"
    - "prod"
    - "qa"
    - "test"
  services:
    - docker:18-dind
  before_script:
    - "apk add --no-cache curl"
    - "apk add py-pip"
    - "pip install awscli --upgrade --user"
    - "export PATH=~/.local/bin:$PATH"
  script:
    - pip install ecs-deploy
    - echo "Login to  ECR Repository"
    - eval $(aws ecr get-login --no-include-email --region ca-central-1)
    - echo "Preparation task"
    - echo "Build Docker Image"
    - docker build -t master .
    - echo "Push to ECR Repository"
    - service_lower_name=$(echo "$service_name" | tr '[:upper:]' '[:lower:]')
    - export AWS_ECR_REPOSITORY="${accountID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${service_lower_name}"
    - echo $AWS_ECR_REPOSITORY
    - docker tag master:latest "${AWS_ECR_REPOSITORY}:${CI_COMMIT_SHA}"
    - docker push "${AWS_ECR_REPOSITORY}:${CI_COMMIT_SHA}"
#=========
# Deploy
#=========
deploy:
  stage: DEV
  image: python:3.7.3
  environment:
    name: development
    url: http://api.dev.monmedx.com
  except:
    - "qa"
  only:
    - "master"
    - "development"
    - "test"
  before_script:
    - "pip install awscli --upgrade --user"
    - "export PATH=~/.local/bin:$PATH"
  script:
    - export env=DEV
    - export CLOUDFORMATION_STACK_NAME=$CLOUDFORMATION_STACK_NAME_DEV
    - . gitlab.sh
    - aws ecs register-task-definition --family "${env}${service_name}" --cli-input-json "file://task-definition.json"
    - aws ecs update-service --cluster $clusterName --service "${service_name}" --desired-count 1 --task-definition "${env}${service_name}"  --force-new-deployment

# QA
#=========
QA:
  stage: QA
  when: manual
  image: python:3.7.3
  environment:
    name: qa
    url: http://api.qa.monmedx.com
  only:
    - "qa"
    - "development"

  before_script:
    - "pip install awscli --upgrade --user"
    - "export PATH=~/.local/bin:$PATH"
    - "aws --version"
  script:
    - export env=QA
    - export $CLOUDFORMATION_STACK_NAME=$CLOUDFORMATION_STACK_NAME_QA
    - . gitlab.sh
    - aws ecs register-task-definition --family "${env}${service_name}" --cli-input-json "file://task-definition.json"
    - aws ecs update-service --cluster $clusterName --service "${service_name}" --desired-count 1 --task-definition "${env}${service_name}"  --force-new-deployment
# QA
#=========
QA:
  stage: QA
  when: manual
  image: python:3.7.3
  environment:
    name: qa
    url: http://api.qa.monmedx.com
  only:
    - "qa"
    - "development"

  before_script:
    - "pip install awscli --upgrade --user"
    - "export PATH=~/.local/bin:$PATH"
    - "aws --version"
  script:
    - export env=QA
    - export $CLOUDFORMATION_STACK_NAME=$CLOUDFORMATION_STACK_NAME_QA
    - . gitlab.sh
    - aws ecs register-task-definition --family "${env}${service_name}" --cli-input-json "file://task-definition.json"
    - aws ecs update-service --cluster $clusterName --service "${service_name}" --desired-count 1 --task-definition "${env}${service_name}"  --force-new-deployment

# staging
#=========
staging:
  stage: staging
  when: manual
  image: python:3.7.3
  environment:
    name: staging
    url: http://api.staging.monmedx.com
  only:
    - "stage"
    - "development"
    - "prod"

  before_script:
    - "pip install awscli --upgrade --user"
    - "export PATH=~/.local/bin:$PATH"
    - "aws --version"
  script:
    - export env=stage
    - export $CLOUDFORMATION_STACK_NAME=$CLOUDFORMATION_STACK_NAME_stage
    - . gitlab.sh
    - aws ecs register-task-definition --family "${env}${service_name}" --cli-input-json "file://task-definition.json"
    - aws ecs update-service --cluster $clusterName --service "${service_name}" --desired-count 1 --task-definition "${env}${service_name}"  --force-new-deployment

# prod
#=========
staging:
  stage: PROD
  when: manual
  image: python:3.7.3
  environment:
    name: PROD
    url: http://api.monmedx.com
  only:
    - "development"
    - "prod"

  before_script:
    - "pip install awscli --upgrade --user"
    - "export PATH=~/.local/bin:$PATH"
    - "aws --version"
  script:
    - export env=prod
    - export $CLOUDFORMATION_STACK_NAME=$CLOUDFORMATION_STACK_NAME_PROD
    - . gitlab.sh
    - aws ecs register-task-definition --family "${env}${service_name}" --cli-input-json "file://task-definition.json"
    - aws ecs update-service --cluster $clusterName --service "${service_name}" --desired-count 1 --task-definition "${env}${service_name}"  --force-new-deployment
