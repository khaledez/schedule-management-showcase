openapi: 3.0.0
servers: []
info:
  description: This swagger explain schedule management services.
  version: 1.0.0
  title: Schedule Management Service
  contact:
    name: Emad Darabeh
    email: e.darabeh@dash.ps
tags:
  - name: Appointment
    description: Slots management.
  - name: Availability
    description: Availability management.
  - name: Lookup
    description: lookups apis required to schedule
  - name: WIP
security:
  - bearerAuth: []
paths:
  /appointments:
    post:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
      tags:
        - Appointment
      summary: create a new appointments
      operationId: createAppointmentsOpId
      description: |
        this api for create an appointment
      requestBody:
        description: create appointment requestBody
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAppointmentBody"
      responses:
        200:
          $ref: "#/components/responses/AppointmentResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
  /patients-management:
    get:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/from_date"
        - $ref: "#/components/parameters/to_date"
        - $ref: "#/components/parameters/patient_ramq"
        - $ref: "#/components/parameters/patient_name"
        - $ref: "#/components/parameters/appointment_types_query"
        - $ref: "#/components/parameters/appointment_status_query"
        - $ref: "#/components/parameters/doctor_ids_query"
      tags:
        - WIP
      summary: find the appointments
      operationId: getAppointmentsOpId
      description: |
        this api on assumption that will be used for manage patient page.
      responses:
        200:
          $ref: "#/components/responses/GetAppointmentsResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - WIP
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/registration"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /appointments/{id}/date-extension:
    post:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/appointment_id"
      tags:
        - Appointment
      summary: extend provisional date
      description: |
        update an appointment
        <br>extend the provisional date of an appointment (in waitlist)
      operationId: extendAppointmentOpId
      requestBody:
        description: update appointment requestBody
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtendAppointmentBody"
      responses:
        200:
          $ref: "#/components/responses/AppointmentResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
  /appointments/{id}/cancellation:
    post:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/appointment_id"
      tags:
        - Appointment
      summary: cancel an appointment
      description: |
        update an appointment
        <br>cancel appointment and set it to a new provisional date (in waitlist)
        <br>and optionally provide is_remove_availability_slot to choose whether to keep or delete the availability slot
        <br>is_remove_availability_slot if not provided will default to false
      operationId: cancelAppointmentOpId
      requestBody:
        description: update appointment requestBody
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelAppointmentBody"
      responses:
        200:
          $ref: "#/components/responses/AppointmentResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
  /appointments/{id}/doctor-assignment:
    post:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/appointment_id"
      tags:
        - Appointment
      summary: assign a doctor to an appointment
      description: |
        update an appointment
        <br>assign a new doctor to an appointment
      operationId: changeAppointmentDoctorOpId
      requestBody:
        description: update appointment requestBody
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignAppointmentDoctorBody"
      responses:
        201:
          $ref: "#/components/responses/AppointmentResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
  /appointments/{id}/doctor-changing:
    post:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/appointment_id"
      tags:
        - Appointment
      summary: change assigned doctor to an appointment
      description: |
        update an appointment
        <br>change the existing assigned doctor
      operationId: assignAppointmentDoctorOpId
      requestBody:
        description: update appointment requestBody
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAppointmentDoctorBody"
      responses:
        200:
          $ref: "#/components/responses/AppointmentResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
  /doctors/availability:
    get:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/doctor_ids_query"
        - $ref: "#/components/parameters/appointment_types_query"
        - $ref: "#/components/parameters/from_date"
        - $ref: "#/components/parameters/to_date"
        - $ref: "#/components/parameters/time_groups"
        - $ref: "#/components/parameters/availability_types"
        - $ref: "#/components/parameters/availability_include"
      tags:
        - Availability
      summary: get doctors' availabilities
      operationId: getAvaOpId
      description: |
        get all doctors' availabilities by default if there is no doctors_ ids in the query, if the availability has not booked yet, the value of appointment key will be null.
      responses:
        200:
          $ref: "#/components/responses/FindAvailabilityResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - Availability
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/avaliabilities"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /doctors/{doctorId}/availability:
    post:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/doctor_id_path"
      tags:
        - Availability
      summary: update doctor's availabilities
      description: In order to update a time slot please use to_add array and take consider that will the update process here si deletion old availability and create new ones.
      operationId: updateAvaOpId
      requestBody:
        description: authenticate user object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAvailabilityBody"
      responses:
        200:
          $ref: "#/components/responses/AvailabilityResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
  # /doctors/{doctorId}/availability/{avId}:
  #   get:
  #     parameters:
  #       - $ref: "#/components/parameters/x_cognito_cognito_id"
  #       - $ref: "#/components/parameters/x_mmx_clinic_id"
  #       - $ref: "#/components/parameters/x_cognito_user_id"
  #       - $ref: "#/components/parameters/availability_id"
  #       - $ref: "#/components/parameters/doctor_id_path"
  #     tags:
  #       - Availability
  #     summary: get doctor's availability by id
  #     operationId: getAvaByIdOpId
  #     description: |
  #       get availability by id
  #     responses:
  #       200:
  #         $ref: "#/components/responses/GetAvailabilityResponse"
  #       401:
  #         $ref: "#/components/responses/ErrorResponse"
  #       500:
  #         $ref: "#/components/responses/ErrorResponse"
  #   options:
  #     parameters:
  #       - $ref: "#/components/parameters/availability_id"
  #       - $ref: "#/components/parameters/doctor_id_path"
  #     tags:
  #       - Availability
  #     operationId: optionsAvailabilityOpId
  #     description: |
  #       options request for getting a clinic's availability
  #     responses:
  #       200:
  #         description: OK
  #         headers:
  #           Access-Control-Allow-Origin:
  #             schema:
  #               type: string
  #           Access-Control-Allow-Methods:
  #             schema:
  #               type: string
  #           Access-Control-Allow-Headers:
  #             schema:
  #               type: string
  #     x-amazon-apigateway-integration:
  #       uri: "https://${stageVariables.apihost}/avaliabilities"
  #       responses:
  #         default:
  #           statusCode: "200"
  #           responseParameters:
  #             method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
  #             method.response.header.Access-Control-Allow-Headers: >-
  #               'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
  #             method.response.header.Access-Control-Allow-Origin: "'*'"
  #       requestTemplates:
  #         application/json: '{"statusCode": 200}'
  #       passthroughBehavior: when_no_match
  #       type: mock
  /suggested-availability:
    get:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/doctor_ids_query"
        - $ref: "#/components/parameters/time_groups"
        - $ref: "#/components/parameters/availability_include"
      tags:
        - Availability
      summary: get suggested availabilities
      operationId: getSugAvaOpId
      description: |
        get suggested availabilities
      responses:
        200:
          $ref: "#/components/responses/FindAvailabilityResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - Availability
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/avaliabilities"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /days-availability:
    get:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/doctor_ids_query"
        - $ref: "#/components/parameters/from_date"
        - $ref: "#/components/parameters/to_date"
        - $ref: "#/components/parameters/time_groups"
      tags:
        - Availability
      summary: find the days of availability at current month
      operationId: getAvailabilityDaysOpId
      description: |
        find the days of availabilities at current month or the secretary can find to any month.
      responses:
        200:
          $ref: "#/components/responses/FindAvailabilityDaysResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - Availability
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/avaliabilities-days"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /appointment-types:
    get:
      tags:
        - Lookup
      summary: get clinic's appointment types
      operationId: getAppointTypesOpId
      description: |
        get clinic appointment types
      responses:
        200:
          $ref: "#/components/responses/GetAppointmentTypesResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - Lookup
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/appointment-types"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /time-slots:
    get:
      tags:
        - Lookup
      summary: get clinic's time slot steps
      operationId: getClinicTimeSlotsOpId
      description: |
        get clinic time slot steps
      responses:
        200:
          $ref: "#/components/responses/TimeSlotsLookupResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - Lookup
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/time-slots"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /scheduling:
    post:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
      tags:
        - Availability
      summary: schedule an appointment
      description: schedule an appointment
      operationId: schedulingOpId
      requestBody:
        description: reschedule object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Scheduling"
      responses:
        "201":
          $ref: "#/components/responses/SchedulingResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /rescheduling:
    post:
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
      tags:
        - Availability
      summary: reschedule an appointment
      description: reschedule an appointment
      operationId: reschedulingOpId
      requestBody:
        description: reschedule object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rescheduling"
      responses:
        "201":
          $ref: "#/components/responses/ReschedulingResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /patients/{patientId}/assign-doctor:
    parameters:
      - $ref: "#/components/parameters/patient_id"
    post:
      tags:
        - WIP
      summary: WIP! Assign doctor to a patient
      description: assign doctor to the patient without scheduling an appointment, WIP! this api exits in patient-mngt-service.
      operationId: assignDoctorToPatientOpId
      requestBody:
        description: assign a doctor to a patient
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignDoctor"
      responses:
        "201":
          $ref: "#/components/responses/AssignDoctorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /time-groups:
    get:
      tags:
        - Lookup
      summary: get clinic time groups
      description: list of clinic time groups (morning, afternoon, and evening hours)
      operationId: timeGroupsOpId
      responses:
        200:
          $ref: "#/components/responses/TimeGroupsResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - Lookup
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/time-groups"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /priorities:
    get:
      tags:
        - Lookup
      summary: get clinic's priorities
      description: list of priorities
      operationId: prioritiesOpId
      responses:
        200:
          $ref: "#/components/responses/ClinicSlotsLookupResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - Lookup
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/priorites"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /appointment-statuses:
    get:
      tags:
        - Lookup
      summary: get clinic's appointment statues
      description: list of appointment statues
      operationId: appointmentStatuesOpId
      responses:
        200:
          $ref: "#/components/responses/AppointmentStatuesLookupResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - Lookup
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/appointment-statuses"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /clinic-working-hours:
    get:
      tags:
        - Lookup
      summary: get clinic's working hours
      description: list of working hours
      operationId: clinicWorkingHoursOpId
      responses:
        200:
          $ref: "#/components/responses/ClinicWorkingHoursLookupResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
    options:
      tags:
        - Lookup
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: "https://${stageVariables.apihost}/clinic-working-hours"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /doctors:
    get:
      tags:
        - WIP
      summary: get clinic doctors
      operationId: getDoctorsOpId
      description: |
        get clinic doctors
      responses:
        200:
          $ref: "#/components/responses/GetDoctorsResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
  /patients:
    get:
      tags:
        - WIP
      parameters:
        - $ref: "#/components/parameters/x_cognito_cognito_id"
        - $ref: "#/components/parameters/x_mmx_clinic_id"
        - $ref: "#/components/parameters/x_mmx_lang"
        - $ref: "#/components/parameters/x_cognito_user_id"
        - $ref: "#/components/parameters/patient_status"
        - $ref: "#/components/parameters/patient_phone_number"
        - $ref: "#/components/parameters/patient_dob"
        - $ref: "#/components/parameters/patient_name"
        - $ref: "#/components/parameters/patient_ramq"
        - $ref: "#/components/parameters/patient_provisional_date"
      summary: get clinic patients
      operationId: getPatientsOpId
      description: |
        get clinic patients
      responses:
        200:
          $ref: "#/components/responses/GetPatientsResponse"
        401:
          $ref: "#/components/responses/ErrorResponse"
        500:
          $ref: "#/components/responses/ErrorResponse"
components:
  securitySchemes:
    bearerAuth:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        providerARNs:
          - "arn:aws:cognito-idp:us-east-1:259079320262:userpool/us-east-1_bnSDEoZne"
        type: "cognito_user_pools"
  parameters:
    x_cognito_cognito_id:
      name: x-cognito-cognito-id
      in: header
      required: true
      schema:
        $ref: "#/components/headers/X-cognito-cognito-id"
    x_mmx_clinic_id:
      name: x-mmx-clinic-id
      in: header
      required: true
      schema:
        $ref: "#/components/headers/X-mmx-clinic-id"
    x_mmx_lang:
      name: x-mmx-lang
      in: header
      required: true
      schema:
        $ref: "#/components/headers/X-mmx-lang"
    x_cognito_user_id:
      name: x-cognito-user-id
      description: practitioner id
      in: header
      required: true
      schema:
        $ref: "#/components/headers/X-cognito-user-id"
    doctor_id_query:
      name: doctor_id
      in: query
      description: doctor id
      schema:
        type: number
    availability_id:
      name: avId
      in: path
      description: availability id
      required: true
      schema:
        type: number
    patient_id:
      name: patientId
      in: path
      required: true
      schema:
        type: number
    doctor_id_path:
      name: doctorId
      in: path
      description: doctor's identifier
      required: true
      schema:
        type: string
    doctor_ids_query:
      name: doctor_ids
      in: query
      description: doctors identifiers
      schema:
        type: array
        items:
          type: number
    appointment_types_query:
      name: appointment_types_ids
      in: query
      description: appointment types array for example 1 => FUQ, 2 => NEW, 3 => FUQ/NEW
      schema:
        type: array
        items:
          type: number
    appointment_status_query:
      name: appointment_status_ids
      in: query
      description: appointment status array for example 1=>waitlist, 2=> confirmed, 3=> ready
      schema:
        type: array
        items:
          type: number
    time_groups:
      name: time_groups_ids
      in: query
      schema:
        type: array
        items:
          type: number
    date_query:
      name: date
      in: query
      description: date string
      schema:
        type: string
    patient_status:
      name: status
      in: query
      description: patient status
      schema:
        type: string
    appointment_status:
      name: status
      in: query
      description: appointment status
      schema:
        type: string
    appointment_id:
      name: id
      in: path
      description: appointment id
      required: true
      schema:
        type: string
    patient_phone_number:
      name: phone_number
      in: query
      description: patient phone number
      schema:
        type: string
    patient_dob:
      name: dob
      in: query
      description: dob
      schema:
        type: string
    patient_ramq:
      name: ramq
      in: query
      description: patient ramq
      schema:
        type: string
    patient_provisional_date:
      name: provisional_date
      in: query
      description: patient provisional date
      schema:
        type: string
    patient_name:
      name: patient_name
      in: query
      description: patient name
      schema:
        type: string
    from_time:
      name: from_time
      in: query
      description: start time
      schema:
        $ref: "#/components/schemas/Time"
    to_time:
      name: to_time
      in: query
      description: end time
      schema:
        $ref: "#/components/schemas/Time"
    from_date:
      name: from_date
      in: query
      description: start date
      schema:
        $ref: "#/components/schemas/Date"
    to_date:
      name: to_date
      in: query
      description: end date
      schema:
        $ref: "#/components/schemas/Date"
    availability_types:
      name: availability_types
      in: query
      description: both of them is the default value.
      schema:
        type: array
        items:
          enum:
            - booked
            - unbooked
    availability_include:
      name: include
      in: query
      schema:
        type: array
        items:
          enum:
            - appointment
            - patient
            # - doctor
  headers:
    X-cognito-cognito-id:
      description: Extracted from JWT and injected by API Gateway
      schema:
        type: string
    X-mmx-clinic-id:
      description: Extracted from JWT and injected by API Gateway
      schema:
        type: string
    X-mmx-lang:
      description: Extracted from JWT and injected by API Gateway
      schema:
        type: string
    X-cognito-user-id:
      description: Extracted from JWT and injected by API Gateway
      schema:
        type: string
  schemas:
    AvailabilityPeriod:
      allOf:
        - type: object
          properties:
            from:
              $ref: "#/components/schemas/Datetime"
            to:
              $ref: "#/components/schemas/Datetime"
    Datetime:
      type: string
      format: date-time
      nullable: true
    Date:
      type: string
      format: date
      pattern: "YYYY-MM-DD"
    Time:
      type: string
      example: "20:00:00"
    CreatedAtDatetime:
      type: string
      format: date-time
      nullable: true
      readOnly: true
    UpdatedAtDatetime:
      type: string
      format: date-time
      nullable: true
      default: null
      readOnly: true
    StatusCode:
      type: string
    Message:
      type: string
    Error:
      type: object
      required:
        - statusCode
        - message
        - error
      properties:
        statusCode:
          $ref: "#/components/schemas/StatusCode"
        message:
          $ref: "#/components/schemas/Message"
        error:
          type: string
    FirstLine:
      type: string
    SecondLine:
      type: string
      nullable: true
    FirstName:
      type: string
    LastName:
      type: string
      nullable: true
    PlaceId:
      type: number
      nullable: true
      default: null
    TimezoneId:
      type: number
      nullable: true
      default: null
    Country:
      type: string
    State:
      type: string
    City:
      type: string
    Timezone:
      type: string
    ProfilePictureRef:
      type: string
    ClinicId:
      type: number
      readOnly: true
    UserId:
      type: number
      readOnly: true
    Reason:
      type: string
    DeleteAvailabilityAvailability:
      type: boolean
      writeOnly: true
    AddressObject:
      type: object
      required:
        - line_1
        - country
        - state
        - city
        - timezone
      properties:
        place_id:
          $ref: "#/components/schemas/PlaceId"
        timezone_id:
          $ref: "#/components/schemas/TimezoneId"
        first_line:
          $ref: "#/components/schemas/FirstLine"
        last_line:
          $ref: "#/components/schemas/SecondLine"
        country:
          $ref: "#/components/schemas/Country"
        state:
          $ref: "#/components/schemas/State"
        city:
          $ref: "#/components/schemas/City"
        timezone:
          $ref: "#/components/schemas/Timezone"
    Timestamps:
      allOf:
        - $ref: "#/components/schemas/CreateProps"
        - $ref: "#/components/schemas/UpdateProps"
    CreateProps:
      type: object
      properties:
        created_at:
          $ref: "#/components/schemas/CreatedAtDatetime"
        created_by:
          $ref: "#/components/schemas/UserId"
    UpdateProps:
      type: object
      properties:
        updated_at:
          $ref: "#/components/schemas/UpdatedAtDatetime"
        updated_by:
          $ref: "#/components/schemas/UserId"
    AssignDoctor:
      type: object
      properties:
        doctor_id:
          type: number
    RAMQ:
      type: string
    Rescheduling:
      allOf:
        - type: object
          properties:
            old_availability_id:
              type: number
            new_availability_id:
              type: number
            reason:
              $ref: "#/components/schemas/Reason"
            delete_availability:
              $ref: "#/components/schemas/DeleteAvailabilityAvailability"
            patient_id:
              type: number
            doctor_id:
              type: number
            clinic_id:
              type: number

        - $ref: "#/components/schemas/Timestamps"
    Scheduling:
      type: object
      properties:
        appointment_id:
          type: number
        availability_id:
          type: number
        patient_id:
          type: number
        doctor_id:
          type: number
    PublicUserData:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        first_name:
          $ref: "#/components/schemas/FirstName"
        last_name:
          $ref: "#/components/schemas/LastName"
    TimeGroup:
      allOf:
        - type: object
          properties:
            id:
              type: number
            label:
              type: string
              example: "morning"
            start_time:
              type: string
              example: "08:00"
            end_time:
              type: string
              example: "11:00"
            clinic_id:
              $ref: "#/components/schemas/ClinicId"
            doctor_id:
              $ref: "#/components/schemas/UserId"
        - $ref: "#/components/schemas/Timestamps"
    PriorityLookup:
      allOf:
        - type: object
          properties:
            id:
              type: number
            label:
              type: string
            value:
              type: string
            rank:
              type: number
            clinic_id:
              $ref: "#/components/schemas/ClinicId"
            doctor_id:
              $ref: "#/components/schemas/UserId"
        - $ref: "#/components/schemas/Timestamps"
    AppointmentStatuesLookup:
      allOf:
        - type: object
          properties:
            id:
              type: number
            label:
              type: string
            value:
              type: string
            clinic_id:
              $ref: "#/components/schemas/ClinicId"
            doctor_id:
              $ref: "#/components/schemas/UserId"
        - $ref: "#/components/schemas/Timestamps"
    TimeSlotLookup:
      allOf:
        - type: object
          properties:
            id:
              type: number
            label:
              type: string
              example: "15"
            value:
              type: string
              example: "15 min"
            clinic_id:
              $ref: "#/components/schemas/ClinicId"
            doctor_id:
              $ref: "#/components/schemas/UserId"
        - $ref: "#/components/schemas/Timestamps"
    ClinicWorkingHoursLookup:
      allOf:
        - type: object
          properties:
            id:
              type: number
            start_time:
              $ref: "#/components/schemas/Time"
            end_time:
              $ref: "#/components/schemas/Time"
            timezone:
              type: string
            clinic_id:
              $ref: "#/components/schemas/ClinicId"
            doctor_id:
              $ref: "#/components/schemas/UserId"
        - $ref: "#/components/schemas/Timestamps"
    DoctorId:
      type: number
    duration_minutes:
      type: number
    Doctor:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/DoctorId"
        name:
          type: string
    AppointmentType:
      type: number
      example: 0 => 'FUQ'
    PaginatedResult:
      type: object
      required:
        - limit
        - size
        - offset
      properties:
        limit:
          type: integer
          format: int32f
          description: Max number of items per page
        size:
          type: integer
          format: int32
          description: The size of current page
        skip:
          type: integer
          format: int32
          description: Number of skipped items
        total:
          type: integer
          format: int32
          description: Total number of records
    AppointmentStatus:
      type: number
      example: 0 => 'waitlist'
    AppointmentPriority:
      type: number
      example: 0 => 'a'
    Appointment:
      allOf:
        - type: object
          properties:
            id:
              type: number
            patient_id:
              type: number
            assigned_doctor_id:
              type: number
            availability_id:
              type: number
            old_appointment_id:
              type: number
            type_id:
              $ref: "#/components/schemas/AppointmentType"
            provisional_date:
              $ref: "#/components/schemas/Datetime"
            booked_date:
              $ref: "#/components/schemas/Datetime"
            status_id:
              $ref: "#/components/schemas/AppointmentStatus"
            priority_id:
              $ref: "#/components/schemas/AppointmentPriority"
            rescheduling_reason:
              type: string
            cancellation_reason:
              type: string
            doctor_reassignment_reason:
              type: string
            complains:
              type: string
            clinical_notes:
              type: string
            date_extension_reason:
              type: string
        - $ref: "#/components/schemas/Timestamps"
    Availability:
      type: object
      properties:
        id:
          type: number
        start_time:
          $ref: "#/components/schemas/Time"
        end_time:
          $ref: "#/components/schemas/Time"
        date:
          $ref: "#/components/schemas/Date"
        duration_minutes:
          $ref: "#/components/schemas/duration_minutes"
        type_id:
          $ref: "#/components/schemas/AppointmentType"
    PublicDoctorData:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/DoctorId"
        first_name:
          $ref: "#/components/schemas/FirstName"
        last_name:
          $ref: "#/components/schemas/LastName"
    AvailabilityWithPatientData:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Availability"
              - type: object
                properties:
                  appointment:
                    $ref: "#/components/schemas/Appointment"
                  patient:
                    $ref: "#/components/schemas/PublicUserData"
    AppointmentsWithPatientData:
      type: object
      allOf:
        - $ref: "#/components/schemas/Appointment"
        # - type: object
        #   properties:
        #     doctor:
        #       $ref: "#/components/schemas/PublicDoctorData"
        #     patient:
        #       $ref: "#/components/schemas/PublicUserData"
    AvailabilityWithPatientDataObject:
      type: object
      properties:
        data:
          type: object
          allOf:
            - $ref: "#/components/schemas/Availability"
            # - $ref: "#/components/schemas/PublicDoctorData"
            - type: object
              properties:
                patient:
                  $ref: "#/components/schemas/PublicUserData"
    AvailabilityDaysDataObject:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Date"
    CreateAvailabilityBody:
      type: array
      items:
        allOf:
          - type: object
            required:
              - from
              - to
              - duration_minutes
              - type
            properties:
              start_time:
                $ref: "#/components/schemas/Time"
              date:
                $ref: "#/components/schemas/Date"
              duration_minutes:
                $ref: "#/components/schemas/duration_minutes"
              type_id:
                $ref: "#/components/schemas/AppointmentType"
    UpdateAvailabilityBody:
      allOf:
        - type: object
          properties:
            to_add:
              type: array
              items:
                type: object
                properties:
                  start_time:
                    $ref: "#/components/schemas/Time"
                  date:
                    $ref: "#/components/schemas/Date"
                  duration_minutes:
                    $ref: "#/components/schemas/duration_minutes"
                  type_id:
                    $ref: "#/components/schemas/AppointmentType"
            to_delete:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: number
    ExtendAppointmentBody:
      allOf:
        - type: object
          properties:
            provisional_date:
              $ref: "#/components/schemas/Datetime"
            reason_message:
              type: string
    CreateAppointmentBody:
      allOf:
        - type: object
          required:
            - patient_id
            - type
            - priority
          properties:
            patient_id:
              type: number
            type_id:
              $ref: "#/components/schemas/AppointmentType"
            provisional_date:
              $ref: "#/components/schemas/Datetime"
            priority_id:
              $ref: "#/components/schemas/AppointmentPriority"
            status_id:
              $ref: "#/components/schemas/AppointmentStatus"
            complains:
              type: string
            clinic_notes:
              type: string
    CancelAppointmentBody:
      allOf:
        - type: object
          properties:
            provisional_date:
              $ref: "#/components/schemas/Datetime"
            reason_message:
              type: string
            is_remove_availability_slot:
              type: boolean
    AssignAppointmentDoctorBody:
      allOf:
        - type: object
          properties:
            doctor_id:
              type: number
    ChangeAppointmentDoctorBody:
      allOf:
        - type: object
          properties:
            doctor_id:
              type: number
            reason_message:
              type: string
    AppointmentResponseData:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AppointmentsWithPatientData"
    AvailabilityResponseData:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Availability"
              - type: object
                properties:
                  clinic_id:
                    type: number
              - $ref: "#/components/schemas/Timestamps"
    ReschedulingResponseData:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AppointmentsWithPatientData"
    ResponseMetaData:
      type: object
      properties:
        meta:
          type: object
  responses:
    GetDoctorAvailability:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AvailabilityPeriod"
    TimeGroupsResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/PaginatedResult"
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TimeGroup"
    ReschedulingResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ResponseMetaData"
              - $ref: "#/components/schemas/ReschedulingResponseData"
    SchedulingResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AvailabilityWithPatientData"
    ErrorResponse:
      description: ""
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Created:
      description: Success
    GetAppointmentTypesResponse:
      description: success
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/PaginatedResult"
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TimeSlotLookup"
    AvailabilityResponse:
      description: Array of availabilities
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ResponseMetaData"
              - $ref: "#/components/schemas/AvailabilityResponseData"
    FindAvailabilityResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/PaginatedResult"
              - $ref: "#/components/schemas/AvailabilityWithPatientData"
    FindAvailabilityDaysResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AvailabilityDaysDataObject"
    GetAvailabilityResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AvailabilityWithPatientDataObject"
    GetDoctorsResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PublicDoctorData"
    SuccessMessageResponse:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: success message
    GetPatientsResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Doctor"
    TimeSlotsLookupResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/PaginatedResult"
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TimeSlotLookup"
    AppointmentResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ResponseMetaData"
              - $ref: "#/components/schemas/AppointmentResponseData"
    GetAppointmentsResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ResponseMetaData"
              - $ref: "#/components/schemas/PaginatedResult"
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppointmentsWithPatientData"
    ClinicSlotsLookupResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/PaginatedResult"
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PriorityLookup"

    AppointmentStatuesLookupResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/PaginatedResult"
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppointmentStatuesLookup"
    ClinicWorkingHoursLookupResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClinicWorkingHoursLookup"
    NoContentResponse:
      description: No Content
    AssignDoctorResponse:
      description: Assigned success
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  doctor_id:
                    $ref: "#/components/schemas/DoctorId"
                  patient_id:
                    $ref: "#/components/schemas/UserId"
                  clinic_id:
                    $ref: "#/components/schemas/ClinicId"
              - $ref: "#/components/schemas/CreateProps"
