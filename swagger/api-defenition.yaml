openapi: 3.0.0
servers: []
info:
  description: This swagger explain schedule management services.
  version: 1.0.0
  title: Schedule Management Service
  contact:
    name: Emad Darabeh
    email: e.darabeh@dash.ps
tags:
  - name: Appointment
    description: Slots management.
  - name: Availability
    description: Availability management.
  - name: WIP
  - name: Lookup
    description: lookups apis required to schedule
security:
  - bearerAuth: []
paths:
  /appointments:
    get:
      parameters:
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/appointment_type'
        - $ref: '#/components/parameters/patient_ramq'
        - $ref: '#/components/parameters/patient_name'
        - $ref: '#/components/parameters/appointment_status'
      tags:
        - Appointment
      summary: find the appointments
      operationId: getAppointmentsOpId
      description: |
        get appointments of current clinic
      responses:
        200:
          $ref: '#/components/responses/GetAppointmentsResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    options:
      tags:
        - Appointment
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.apihost}/registration'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /appointments/{id}/date-extension:
    put:
      parameters:
        - $ref: '#/components/parameters/appointment_id'
      tags:
        - Appointment
      summary: extend provisional date
      description: |
        update an appointment
        <br>extend the provisional date of an appointment (in waitlist)
      operationId: extendAppointmentOpId
      requestBody:
        description: update appointment requestBody
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendAppointmentBody'
      responses:
        200:
          $ref: '#/components/responses/AppointmentResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
  /appointments/{id}/cancellation:
    put:
      parameters:
        - $ref: '#/components/parameters/appointment_id'
      tags:
        - Appointment
      summary: cancel an appointment
      description: |
        update an appointment
        <br>cancel appointment and set it to a new provisional date (in waitlist)
      operationId: cancelAppointmentOpId
      requestBody:
        description: update appointment requestBody
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelAppointmentBody'
      responses:
        200:
          $ref: '#/components/responses/AppointmentResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
  /appointments/{id}/doctor-assignment:
    put:
      parameters:
        - $ref: '#/components/parameters/appointment_id'
      tags:
        - Appointment
      summary: assign a doctor to an appointment
      description: |
        update an appointment
        <br>assign a doctor to an appointment, or change the existing assigned doctor
      operationId: assignAppointmentDoctorOpId
      requestBody:
        description: update appointment requestBody
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignAppointmentDoctorBody'
      responses:
        200:
          $ref: '#/components/responses/AppointmentResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
  /appointments/{id}/type-changing:
    put:
      parameters:
        - $ref: '#/components/parameters/appointment_id'
      tags:
        - Appointment
      summary: change the type of an appointment
      description: |
        update an appointment
        <br>change the type of an appointment
      operationId: changeAppointmentTypeOpId
      requestBody:
        description: update appointment requestBody
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignAppointmentDoctorBody'
      responses:
        200:
          $ref: '#/components/responses/AppointmentResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
  /availabilities:
    post:
      tags:
        - Availability
      summary: create doctor's availabilties
      operationId: createAvaOpId
      description: |
        create clinic availabilty for a doctor
      requestBody:
        description: autheticate user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAvailabilityBody'
      responses:
        201:
          $ref: '#/components/responses/AvailabilityResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    get:
      parameters:
        - $ref: '#/components/parameters/doctor_id_query'
        - $ref: '#/components/parameters/appointment_type'
        - $ref: '#/components/parameters/day'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      tags:
        - Availability
      summary: get doctor's availabilities
      operationId: getAvaOpId
      description: |
        get doctor's availabilties
      responses:
        200:
          $ref: '#/components/responses/FindAvailabilitysResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    options:
      tags:
        - Availability
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.apihost}/avaliabilities'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /avaliabilities-doctor:
    get:
      tags:
        - Availability
      parameters:
        - $ref: '#/components/parameters/doctor_id_query'
        - $ref: '#/components/parameters/day'
      summary: get periiod of doctor's availability
      responses:
        200:
          $ref: '#/components/responses/GetDoctorAvailability'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    options:
      tags:
        - Availability
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.apihost}/avaliabilities-doctor'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock

  /availabilities-days:
    get:
      parameters:
        - $ref: '#/components/parameters/doctor_id_query'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      tags:
        - Availability
      summary: find the days of availability at current month
      operationId: getAvailabilitysDaysOpId
      description: |
        find the days of Availabilitys at current month or the secertray can find to any month.
      responses:
        200:
          $ref: '#/components/responses/FindAvailabilitysDaysResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    options:
      tags:
        - Availability
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.apihost}/avaliabilities-days'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /availabilities/{id}:
    get:
      parameters:
        - $ref: '#/components/parameters/availability_id'
      tags:
        - Availability
      summary: get doctor's availabilty by id
      operationId: getAvaByIdOpId
      description: |
        get availabilty by id
      responses:
        200:
          $ref: '#/components/responses/GetAvailabilityResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    put:
      parameters:
        - $ref: '#/components/parameters/availability_id'
      tags:
        - Availability
      summary: update doctor's availability
      operationId: updateAvaOpId
      requestBody:
        description: autheticate user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAvailabilityBody'
      responses:
        200:
          $ref: '#/components/responses/AvailabilityResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      parameters:
        - $ref: '#/components/parameters/availability_id'
      tags:
        - Availability
      summary: delete clinic availabilty Availabilitys
      operationId: deleteAvaAvailabilitysOpId
      description: |
        delete clinic availabilty Availability
      responses:
        200:
          $ref: '#/components/responses/AvailabilityResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
  /appointment-types:
    get:
      tags:
        - Lookup
      summary: get clinic's appointment types
      operationId: getAppointTypesOpId
      description: |
        get clinic appointment types
      responses:
        200:
          $ref: '#/components/responses/GetAppointmentTypesResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
  /scheduling:
    post:
      tags:
        - Availability
      summary: schedule an appointement
      description: schedule an appointement
      operationId: schedulingOpId
      requestBody:
        description: reschedule object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scheduling'
      responses:
        '201':
          $ref: '#/components/responses/SchedulingResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /rescheduling:
    post:
      tags:
        - Availability
      summary: reschedule an appointement
      description: reschedule an appointement
      operationId: reschedulingOpId
      requestBody:
        description: reschedule object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rescheduling'
      responses:
        '201':
          $ref: '#/components/responses/ReschedulingResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'

  /availabilities/{id}/cancel:
    parameters:
      - $ref: '#/components/parameters/availability_id'
    post:
      tags:
        - Availability
      summary: cancel an appointement
      description: cancel an appointement
      operationId: cancelScheduleOpId
      requestBody:
        description: cancel object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmptyObject'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /patients/{patientId}/assign-doctor:
    parameters:
      - $ref: '#/components/parameters/patient_id'
    post:
      tags:
        - WIP
      summary: WIP! Assign doctor to a patient
      description: assign doctor to the patient without scheduling an appointment, WIP! this api exits in patient-mngt-service.
      operationId: assignDoctorToPatientOpId
      requestBody:
        description: assign a doctor to a patient
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignDoctor'
      responses:
        '201':
          $ref: '#/components/responses/AssignDoctorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /scheduler-times:
    get:
      tags:
        - Lookup
      summary: get scheduler times
      description: list of schduler times
      operationId: schecilerTimesOpId
      responses:
        200:
          $ref: '#/components/responses/SchedulerTimesResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    options:
      tags:
        - Lookup
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        uri: 'https://${stageVariables.apihost}/scheduler-times'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /doctors:
    get:
      tags:
        - Lookup
      summary: get clinic doctors
      operationId: getDoctorsOpId
      description: |
        get clinic doctors
      responses:
        200:
          $ref: '#/components/responses/GetDoctorsResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
  /patients:
    get:
      parameters:
        - $ref: '#/components/parameters/patient_status'
        - $ref: '#/components/parameters/patient_phone_number'
        - $ref: '#/components/parameters/patient_dob'
        - $ref: '#/components/parameters/patient_name'
        - $ref: '#/components/parameters/patient_ramq'
        - $ref: '#/components/parameters/patient_provisional_date'
      tags:
        - Lookup
      summary: get clinic patients
      operationId: getPatientsOpId
      description: |
        get clinic patients
      responses:
        200:
          $ref: '#/components/responses/GetPatientsResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    availability_id:
      name: id
      in: path
      description: availability id
      required: true
      schema:
        type: number
    patient_id:
      name: patientId
      in: path
      required: true
      schema:
        type: number
    doctor_id_path:
      name: id
      in: path
      description: doctor's identifier
      required: true
      schema:
        type: string
    doctor_id_query:
      name: doctor_id
      in: query
      description: doctor's identifier
      schema:
        type: string
    appointment_type:
      name: appointment_type
      in: query
      description: appointment type
      schema:
        type: string
    day:
      name: day
      in: query
      description: date string
      schema:
        type: string
    patient_status:
      name: status
      in: query
      description: patient status
      schema:
        type: string
    appointment_status:
      name: status
      in: query
      description: appointment status
      schema:
        type: string
    appointment_id:
      name: id
      in: path
      description: appointment id
      required: true
      schema:
        type: string
    patient_phone_number:
      name: phone_number
      in: query
      description: patient phone number
      schema:
        type: string
    patient_dob:
      name: dob
      in: query
      description: dob
      schema:
        type: string
    patient_ramq:
      name: ramq
      in: query
      description: patient ramq
      schema:
        type: string
    patient_provisional_date:
      name: provisional_date
      in: query
      description: patient provisional date
      schema:
        type: string
    patient_name:
      name: name
      in: query
      description: patient name
      schema:
        type: string
    from:
      name: from
      in: query
      description: start dateTime
      schema:
        type: string
    to:
      name: to
      in: query
      description: end dateTime
      schema:
        type: string
  schemas:
    EmailAddress:
      type: string
      format: email
    AvailabilityPeriod:
      allOf:
        - type: object
          properties:
            from:
              $ref: '#/components/schemas/Datetime'
            to:
              $ref: '#/components/schemas/Datetime'
    Datetime:
      type: string
      format: date-time
      nullable: true
    CreatedAtDatetime:
      type: string
      format: date-time
      nullable: true
      readOnly: true
    UpdatedAtDatetime:
      type: string
      format: date-time
      nullable: true
      default: null
      readOnly: true
    DeletedAtDatetime:
      type: string
      format: date-time
      nullable: true
      default: null
      readOnly: true
    StatusCode:
      type: string
    Message:
      type: string
    Error:
      type: object
      required:
        - statusCode
        - message
        - error
      properties:
        statusCode:
          $ref: '#/components/schemas/StatusCode'
        message:
          $ref: '#/components/schemas/Message'
        error:
          type: string
    ClinicName:
      type: string
    CognitoId:
      type: string
    PhoneNumber:
      type: string
      minProperties: 11
      maxProperties: 11
    FirstLine:
      type: string
    SecoundLine:
      type: string
      nullable: true
    FirstName:
      type: string
    LastName:
      type: string
      nullable: true
    PlaceId:
      type: number
      nullable: true
      default: null
    TimezoneId:
      type: number
      nullable: true
      default: null
    Country:
      type: string
    State:
      type: string
    City:
      type: string
    Timezone:
      type: string
    LogoRef:
      type: string
    ProfilePictureRef:
      type: string
    ClinicId:
      type: number
      readOnly: true
    UserId:
      type: number
      readOnly: true
    AvailabilityId:
      type: number
      readOnly: true
    AddressId:
      type: string
      readOnly: true
    Reason:
      type: string
    DateOfBirth:
      type: string
      format: date
    DeleteAvailabilityAvailability:
      type: boolean
      writeOnly: true
    PracticionerType:
      type: string
      nullable: false
      enum:
        - doctor
        - nurse
        - admin_billing
        - secertary
        - admin
    AddressObject:
      type: object
      required:
        - line_1
        - country
        - state
        - city
        - timezone
      properties:
        place_id:
          $ref: '#/components/schemas/PlaceId'
        timezone_id:
          $ref: '#/components/schemas/TimezoneId'
        first_line:
          $ref: '#/components/schemas/FirstLine'
        last_line:
          $ref: '#/components/schemas/SecoundLine'
        country:
          $ref: '#/components/schemas/Country'
        state:
          $ref: '#/components/schemas/State'
        city:
          $ref: '#/components/schemas/City'
        timezone:
          $ref: '#/components/schemas/Timezone'
    Timestamps:
      allOf:
        - $ref: '#/components/schemas/CreateProps'
        - $ref: '#/components/schemas/UpdateProps'
        - $ref: '#/components/schemas/DeleteProps'
    CreateProps:
      type: object
      properties:
        created_at:
          $ref: '#/components/schemas/CreatedAtDatetime'
        created_by:
          $ref: '#/components/schemas/UserId'
    UpdateProps:
      type: object
      properties:
        updated_at:
          $ref: '#/components/schemas/UpdatedAtDatetime'
        updated_by:
          $ref: '#/components/schemas/UserId'
    DeleteProps:
      type: object
      properties:
        deleted_at:
          $ref: '#/components/schemas/DeletedAtDatetime'
        deleted_by:
          $ref: '#/components/schemas/UserId'
    Clinic:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/ClinicId'
            clinic_name:
              $ref: '#/components/schemas/ClinicName'
            clinic_phone_no:
              $ref: '#/components/schemas/PhoneNumber'
            clinic_address:
              $ref: '#/components/schemas/AddressObject'
            logo_ref:
              $ref: '#/components/schemas/LogoRef'
            admin_info:
              $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/Timestamps'
    EmptyObject:
      type: object
    AssignDoctor:
      type: object
      properties:
        doctor_id:
          type: number
    RAMQ:
      type: string
    Rescheduling:
      allOf:
        - type: object
          properties:
            old_Availability_id:
              type: number
            new_Availability_ids:
              type: array
              items:
                $ref: '#/components/schemas/AvailabilityId'
            reason:
              $ref: '#/components/schemas/Reason'
            delete_availability_Availability:
              $ref: '#/components/schemas/DeleteAvailabilityAvailability'
            patient_id:
              type: number
            doctor_id:
              type: number
            clinic_id:
              type: number

        - $ref: '#/components/schemas/Timestamps'
    Scheduling:
      type: object
      properties:
        Availability_ids:
          type: array
          items:
            $ref: '#/components/schemas/AvailabilityId'
        patient_ids:
          type: array
          items:
            type: number
        doctor_id:
          type: number
    User:
      type: object
      readOnly: true
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        cognito_id:
          $ref: '#/components/schemas/CognitoId'
        clinic_id:
          $ref: '#/components/schemas/ClinicId'
        address_id:
          $ref: '#/components/schemas/AddressId'
        address:
          $ref: '#/components/schemas/AddressObject'
        phone_no:
          $ref: '#/components/schemas/PhoneNumber'
        profile_picture:
          $ref: '#/components/schemas/LogoRef'
        dob:
          $ref: '#/components/schemas/DateOfBirth'
        practicioner_type:
          $ref: '#/components/schemas/PracticionerType'
        email:
          $ref: '#/components/schemas/EmailAddress'
        first_name:
          $ref: '#/components/schemas/FirstName'
        last_name:
          $ref: '#/components/schemas/LastName'
    PublicUserData:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        clinic_id:
          $ref: '#/components/schemas/ClinicId'
        first_name:
          $ref: '#/components/schemas/FirstName'
        last_name:
          $ref: '#/components/schemas/LastName'
        profile_picture:
          $ref: '#/components/schemas/ProfilePictureRef'
        address:
          $ref: '#/components/schemas/AddressObject'
        rmaq:
          $ref: '#/components/schemas/RAMQ'
    SchedulerTimes:
      allOf:
        - type: object
          properties:
            id:
              type: number
            label:
              type: string
              example: 'morning'
            start_time:
              type: string
              example: '08:00'
            end_time:
              type: string
              example: '11:00'
            clinic_id:
              $ref: '#/components/schemas/ClinicId'
            doctor_id:
              $ref: '#/components/schemas/UserId'
        - $ref: '#/components/schemas/Timestamps'
    DoctorId:
      type: number
    Date:
      type: string
      format: date
      pattern: 'YYYY-MM-DD'
    AppointmentTypeId:
      type: number
    time_slot:
      type: number
    Doctor:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DoctorId'
        name:
          type: string
    Duration:
      type: number
    AppointmentType:
      type: string
      # properties:
      #   id:
      #     $ref: "#/components/schemas/AppointmentTypeId"
      #   name:
      #     type: string
    PaginatedResult:
      type: object
      required:
        - limit
        - size
        - offset
      properties:
        limit:
          type: integer
          format: int32
          description: Max number of items per page
        size:
          type: integer
          format: int32
          description: The size of current page
        skip:
          type: integer
          format: int32
          description: Number of skipped items
        total:
          type: integer
          format: int32
          description: Total number of records
    AppointmentStatus:
      type: string
      enum:
        - waitlist
        - confirmation_1_pending
        - confirmation_2_pending
        - confirmed
        - arrived
        - ready
    AppointmentPriority:
      type: string
      enum:
        - a
        - b
    Appointment:
      type: object
      properties:
        id:
          type: number
        patient:
          $ref: '#/components/schemas/PublicUserData'
        doctor:
          $ref: '#/components/schemas/PublicDoctorData'
        appointment_type:
          $ref: '#/components/schemas/AppointmentType'
        date:
          $ref: '#/components/schemas/Datetime'
        duration:
          $ref: '#/components/schemas/Duration'
        status:
          $ref: '#/components/schemas/AppointmentStatus'
        priority:
          $ref: '#/components/schemas/AppointmentPriority'
    Availability:
      type: object
      properties:
        id:
          type: number
        from:
          $ref: '#/components/schemas/Datetime'
        to:
          $ref: '#/components/schemas/Datetime'
        time_slot:
          $ref: '#/components/schemas/time_slot'
        appointmentType:
          $ref: '#/components/schemas/AppointmentType'
    PublicDoctorData:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DoctorId'
        first_name:
          $ref: '#/components/schemas/FirstName'
        last_name:
          $ref: '#/components/schemas/LastName'
    AvailabilityWithPatientData:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Availability'
              - type: object
                properties:
                  doctor:
                    $ref: '#/components/schemas/PublicDoctorData'
                  patient:
                    $ref: '#/components/schemas/PublicUserData'
    AppointmentsWithPatientData:
      type: object
      allOf:
        - $ref: '#/components/schemas/Appointment'
        - type: object
          properties:
            doctor:
              $ref: '#/components/schemas/PublicDoctorData'
            patient:
              $ref: '#/components/schemas/PublicUserData'
    AvailabilityWithPatientDataObject:
      type: object
      properties:
        data:
          type: object
          allOf:
            - $ref: '#/components/schemas/Availability'
            - $ref: '#/components/schemas/PublicDoctorData'
            - type: object
              properties:
                patient:
                  $ref: '#/components/schemas/PublicUserData'
    AvailabilitysDaysDataObject:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Date'
    CreateAvailabilityBody:
      allOf:
        - type: object
          required:
            - doctor_id
            - from
            - to
            - time_slot
            - appointment_type
          properties:
            doctor_id:
              $ref: '#/components/schemas/DoctorId'
            from:
              $ref: '#/components/schemas/Datetime'
            to:
              $ref: '#/components/schemas/Datetime'
            time_slot:
              $ref: '#/components/schemas/time_slot'
            appointment_type:
              type: string
    UpdateAvailabilityBody:
      allOf:
        - type: object
          properties:
            from:
              $ref: '#/components/schemas/Datetime'
            to:
              $ref: '#/components/schemas/Datetime'
            time_slot:
              $ref: '#/components/schemas/time_slot'
            appointment_type:
              type: string
    UpdateAppointmentBody:
      allOf:
        - type: object
          properties:
            doctor_id:
              type: number
            date:
              type: string
            appointment_type:
              type: string
    ExtendAppointmentBody:
      allOf:
        - type: object
          properties:
            provisional_date:
              type: string
            reason_message:
              type: string
    CancelAppointmentBody:
      allOf:
        - type: object
          properties:
            provisional_date:
              type: string
            reason_message:
              type: string
    AssignAppointmentDoctorBody:
      allOf:
        - type: object
          properties:
            doctor_id:
              type: number
            reason_message:
              type: string
  responses:
    GetDoctorAvailability:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AvailabilityPeriod'
    SchedulerTimesResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SchedulerTimes'
    ReschedulingResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Rescheduling'
    SchedulingResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AvailabilityWithPatientData'
    ErrorResponse:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Created:
      description: Success
    AvailabilityResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Availability'
              - type: object
                properties:
                  clinic_id:
                    type: string
              - $ref: '#/components/schemas/Timestamps'
    FindAvailabilitysResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PaginatedResult'
              - $ref: '#/components/schemas/AvailabilityWithPatientData'
    FindAvailabilitysDaysResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AvailabilitysDaysDataObject'
    GetAvailabilityResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AvailabilityWithPatientDataObject'
    GetDoctorsResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PublicDoctorData'
    GetPatientsResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Doctor'
    GetAppointmentTypesResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AppointmentType'
    AppointmentResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/AppointmentsWithPatientData'
    GetAppointmentsResponse:
      description: Success
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PaginatedResult'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AppointmentsWithPatientData'

    AssignDoctorResponse:
      description: Assigned success
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  doctor_id:
                    $ref: '#/components/schemas/DoctorId'
                  patient_id:
                    $ref: '#/components/schemas/UserId'
                  clinic_id:
                    $ref: '#/components/schemas/ClinicId'
              - $ref: '#/components/schemas/CreateProps'
              - $ref: '#/components/schemas/DeleteProps'
