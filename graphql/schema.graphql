schema {
  query: Query
  mutation: Mutation
}

type Query {
  ### Appointment Queries
  """
  get appointment
  """
  appointment(id: ID!): Appointment
  """
  find appointments by ids
  """
  appointmentsByIds(ids: [ID!]!): [Appointment!]
  """
  list appointments
  """
  appointments(
    after: String
    before: String
    first: Int
    last: Int
    reverse: Boolean
    """
    Supported filter parameters:
        - patientId
        - doctorId
        - startDate
        - endDate
        - status (AppointmentStatusCode)
     - appointmentTypeId (AppointmentTypeCode)
    See https://shopify.dev/concepts/about-apis/search-syntax#search-query-syntax
    """
    query: String
    sortKey: AppointmentSortKets!
  ): AppointmentConnection!
  ### Availability Queries
  """
  get availability
  """
  availabilityById(id: ID!): Availability
  """
  find availability by ids
  """
  availabilityByIds(ids: [ID!]!): [Availability!]
  """
  list availability
  """
  availability(
    after: String
    before: String
    first: Int
    last: Int
    reverse: Boolean
    """
    Supported filter parameters:
        - patientId
        - doctorId
        - startDate
        - endDate
     - appointmentTypeId (AppointmentTypeCode)
    See https://shopify.dev/concepts/about-apis/search-syntax#search-query-syntax
    """
    query: String
  ): AvailabilityConnection!
  """
  list availability days for a doctor or in general between two dates, default will return current month
  """
  availabilityDays(
    after: String
    before: String
    first: Int
    last: Int
    reverse: Boolean
    """
    Supported filter parameters:
        - doctorId
        - doctorsIds
        - startDate
        - endDate
     - appointmentTypeId (AppointmentTypeCode)
    See https://shopify.dev/concepts/about-apis/search-syntax#search-query-syntax
    """
    query: String
  ): AvailabilityDaysConnection!
}

type Mutation {
  appointmentCreate(input: AppointmentCreateInput!): AppointmentUpsertPayload
  appointmentExtend(
    """
    appointment id
    """
    id: ID!
    input: AppointmentExtendInput!
  ): AppointmentUpsertPayload
  appointmentCancel(
    """
    appointment id
    """
    id: ID!
    input: AppointmentCancelInput!
  ): AppointmentUpsertPayload
  appointmentAssignDoctor(
    """
    appointment id
    """
    id: ID!
    """
    doctor id to assign at the appointment
    """
    doctorId: ID!
  ): AppointmentUpsertPayload
  appointmentChangeAssignedDoctor(
    """
    appointment id
    """
    id: ID!
    input: AppointmentChangeAssignedDoctorInput!
  ): AppointmentUpsertPayload
  appointmentSchedule(input: AppointmentScheduleInput): AppointmentUpsertPayload
  appointmentReschedule(
    """
    appointment id to reschedule
    """
    id: ID!
    input: AppointmentRescheduleInput
  ): AppointmentUpsertPayload

  availabilityCreate(
    input: AvailabilityCreateInput!
  ): AvailabilityUpsertPayload!
  availabilityBulkCreate(
    input: [AvailabilityCreateInput!]!
  ): AvailabilityBulkCreatePayload
  availabilityRemove(
    """
    availability id
    """
    id: ID!
  ): AvailabilityUpsertPayload!
}

input AppointmentCreateInput {
  patientId: ID!
  date: Date!
  typeId: ID!
  startTime: Time
  statusId: ID
  priorityId: ID
  complains: String
  clinic_notes: String
}

input AppointmentExtendInput {
  provisionalDate: Date!
  """
  extension reason message
  """
  message: String!
}

input AppointmentCancelInput {
  provisionalDate: Date!
  """
  cancellation reason message
  """
  message: String
  removeAvailabilitySlot: Boolean
}

input AppointmentChangeAssignedDoctorInput {
  doctorId: ID!
  """
  change Assignement doctors reason message
  """
  message: String
}

input AppointmentScheduleInput {
  appointmentId: ID!
  availabilityId: ID!
  doctorId: ID!
  patientId: ID!
}

input AppointmentRescheduleInput {
  """
  reason for rescheduling the appointment
  """
  reason: String
  """
  remove availability slot for the doctor
  """
  removeAvailability: Boolean
  """
  new availability id
  """
  newAvailabilityId: Boolean!
}

input AvailabilityCreateInput {
  date: Date!
  startTime: Time!
  durationMin: Int!
  doctorId: ID!
  appointmentTypeId: ID!
}

type AppointmentUpsertPayload {
  appointment: Appointment
  errors: [AppointmentUpsertUserError!]!
}

type AvailabilityBulkCreatePayload {
  """
  The IDs of the created availabilty.
  """
  ids: [ID!]
  errors: [AvailabilityUpsertErrorCode!]!
}

type AvailabilityUpsertPayload {
  availability: Availability
  errors: [AvailabilityUpsertErrorCode!]!
}

type AppointmentUpsertUserError implements DisplayableError {
  code: AppointmentUpsertErrorCode
  field: [String!]
  message: String!
}

type AvailabilityUpsert

enum AppointmentUpsertErrorCode {
  """
  Input value is invalid.
  """
  INVALID

  """
  Resource does not exist.
  """
  RESOURCE_NOT_FOUND

  """
  Input value is blank.
  """
  BLANK
}

enum AvailabilityUpsertErrorCode {
  """
  Input value is invalid.
  """
  INVALID

  """
  Operation take too much time to execute
  """
  TIME_OUT
  """
  Operation contains conflicting.
  """
  CONFLICT

  """
  Missing a required argument.
  """
  MISSING_ARGUMENT

  """
  Error Occure at the server
  """
  INTERNAL_SERVER_ERROR
}

enum AppointmentSortKets {
  DATE
}

interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
}

type Clinic implements Node {
  id: ID!
}

type Availability implements Node & CreatedProps & UpdatedProps & DeletedProps {
  id: ID!
  date: Date
  startTime: Time
  endTime: Time
  durationMin: Int
  patient: User
  doctor: User!
  type: AppointmentType
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: User!
  updatedBy: User
  deletedBy: User
}

interface Appointment implements Node & CreatedProps & UpdatedProps & DeletedProps {
  id: ID!
  clinic: Clinic
  patient: User
  doctor: User
  availability: Availability
  previousAppointmentId: ID
  date: Date!
  status: AppointmentStatus
  type: AppointmentType
  priority: AppointmentPriority
  startTime: Time
  complains: String
  clinicalNotes: String
  reschedulingReason: String
  cancellationReason: String
  doctorReassignmentReason: String
  dateExtensionReason: String
  upcomingAppointment: Boolean
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  cancelledAt: DateTime
  createdBy: User!
  updatedBy: User
  deletedBy: User
  cancelledBy: User
}

type AppointmentType implements Node & Lookup {
  id: ID!
  name: String! @i18
  code: AppointmentTypeCode
}

type AppointmentStatus implements Node & Lookup {
  id: ID!
  name: String! @i18
  code: AppointmentStatusCode
}

type AppointmentPriority implements Node {
  id: ID!
  code: AppointmentPriorityCode!
}

type AppointmentConnection implements PageInfo {
  edges: [AppointmentEdge!]!
  pageInfo: PageInfo!
}

type AppointmentEdge {
  cursor: String!
  node: Appointment!
}

interface Availability implements Node & CreatedProps & UpdatedProps & DeletedProps {
  id: ID!
  patient: User
  appointment: Appointment
  date: Date!
  type: AppointmentTypeId
  startTime: Time
  durationMin: Int
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: User!
  updatedBy: User
  deletedBy: User
}

type AvailabilityConnection implements PageInfo {
  edges: [AvailabilityEdge!]!
  pageInfo: PageInfo!
}

type AvailabilityEdge {
  cursor: String!
  node: Availability!
}

type AvailabilityDaysConnection implements PageInfo {
  edges: [AvailabilityDaysEdge!]!
  pageInfo: PageInfo!
}

type AvailabilityDaysEdge {
  cursor: String!
  node: AvailabilityDays!
}

interface AvailabilityDays {
  date: Date!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

interface CreatedProps {
  createdAt: DateTime!
  createdBy: User
}
interface UpdatedProps {
  updatedAt: DateTime
  updatedBy: User
}
interface DeletedProps {
  deletedAt: DateTime
  deletedBy: User
}

type DisplayableError {
  field: [String!]
  message: String!
}

interface Lookup {
  name: String! @i18
}

"""
Lookups: Appointment Types
"""
enum AppointmentTypeCode {
  NEW
  FUP
  FUP_NEW
}

enum AppointmentStatusCode {
  PENDING
  CONFIRMED
  ARRIVED
  READY
}

enum AppointmentPriorityCode {
  A
  B
}

scalar Date

scalar DateTime

scalar Time

scalar JSON

directive @i18 on FIELD_DEFINITION
